name: Monitoring & Alerts

on:
  schedule:
    - cron: '*/5 * * * *'  # Run every 5 minutes
  workflow_dispatch:  # Allow manual triggering

jobs:
  health-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check Health Endpoint
        id: health
        uses: actions/github-script@v7
        with:
          script: |
            const response = await fetch('${{ secrets.HEALTH_CHECK_URL }}');
            const data = await response.json();
            if (data.status !== 'ok') {
              throw new Error(`Health check failed: ${JSON.stringify(data)}`);
            }
            return data;

      - name: Check PITR Status
        id: pitr
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const health = ${{ steps.health.outputs.result }};
            if (!health.pitr.enabled) {
              throw new Error('PITR is not enabled!');
            }
            if (health.pitr.retentionPeriod < 7 * 24 * 60 * 60) { // Less than 7 days
              throw new Error('PITR retention period is less than 7 days!');
            }
            const lastBackupAge = Date.now() - new Date(health.pitr.lastBackup).getTime();
            if (lastBackupAge > 24 * 60 * 60 * 1000) { // More than 24 hours
              throw new Error('No recent PITR backup found!');
            }

      - name: Check Performance Metrics
        id: performance
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const metrics = ${{ steps.health.outputs.result }};
            const memoryThresholds = {
              heapUsed: 512, // MB
              rss: 1024 // MB
            };

            if (metrics.memory.heapUsed > memoryThresholds.heapUsed) {
              throw new Error(`High memory usage: ${metrics.memory.heapUsed}MB heap used`);
            }
            if (metrics.memory.rss > memoryThresholds.rss) {
              throw new Error(`High RSS usage: ${metrics.memory.rss}MB`);
            }

      - name: Send Alert on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: '${{ secrets.SLACK_ALERTS_CHANNEL }}'
          slack-message: |
            :alert: *Health Check Failed*
            Environment: ${{ github.ref }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Error: ${{ job.status }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  error-rate:
    runs-on: ubuntu-latest
    steps:
      - name: Check Error Rate
        id: errors
        uses: actions/github-script@v7
        with:
          script: |
            const sentry = require('@sentry/node');
            sentry.init({
              dsn: '${{ secrets.SENTRY_DSN_MONITORING }}',
            });

            const now = new Date();
            const fiveMinutesAgo = new Date(now - 5 * 60 * 1000);

            const query = `
              is:unresolved
              timesSeen:>1
              firstSeen:>${fiveMinutesAgo.toISOString()}
            `;

            const issues = await sentry.api.request(`/projects/${process.env.SENTRY_ORG}/${process.env.SENTRY_PROJECT}/issues/?query=${query}`);

            if (issues.length > 0) {
              const errorRate = issues.reduce((sum, issue) => sum + issue.count, 0) / (5 * 60); // errors per second
              if (errorRate > 0.01) { // More than 1% error rate
                throw new Error(`High error rate detected: ${errorRate.toFixed(2)} errors/sec`);
              }
            }

      - name: Send Alert on High Error Rate
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: '${{ secrets.SLACK_ALERTS_CHANNEL }}'
          slack-message: |
            :warning: *High Error Rate Detected*
            Environment: ${{ github.ref }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please check Sentry for details: ${{ secrets.SENTRY_URL }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  latency:
    runs-on: ubuntu-latest
    steps:
      - name: Check API Latency
        id: latency
        uses: actions/github-script@v7
        with:
          script: |
            const endpoints = [
              '${{ secrets.API_ENDPOINT }}/health',
              '${{ secrets.API_ENDPOINT }}/api/dashboard',
              '${{ secrets.API_ENDPOINT }}/api/leads',
            ];

            for (const endpoint of endpoints) {
              const start = Date.now();
              const response = await fetch(endpoint);
              const duration = Date.now() - start;

              if (duration > 500) { // More than 500ms
                throw new Error(`High latency detected for ${endpoint}: ${duration}ms`);
              }

              if (!response.ok) {
                throw new Error(`Endpoint ${endpoint} returned ${response.status}`);
              }
            }

      - name: Send Alert on High Latency
        if: failure()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: '${{ secrets.SLACK_ALERTS_CHANNEL }}'
          slack-message: |
            :snail: *High Latency Detected*
            Environment: ${{ github.ref }}
            Workflow: ${{ github.workflow }}
            Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            Please check the monitoring dashboard for details.
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
