name: Quarterly Database Restore Test

on:
  schedule:
    # Run at midnight on the 1st day of every 3rd month
    - cron: '0 0 1 */3 *'
  workflow_dispatch: # Allow manual triggering

jobs:
  restore-test:
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Supabase CLI
        run: |
          curl -s https://cli.supabase.com/install.sh | sh
          supabase --version

      - name: Install dependencies
        run: npm ci

      - name: Get latest production backup timestamp
        id: get-backup
        run: |
          TIMESTAMP=$(supabase backups list --db-url "${{ secrets.SUPABASE_URL }}" --limit 1 --format=json | jq -r '.[0].created_at')
          echo "backup_timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT

      - name: Restore database from backup
        run: |
          supabase db restore \
            --db-url "${{ secrets.STAGING_DB_URL }}" \
            --from "${{ steps.get-backup.outputs.backup_timestamp }}"

      - name: Run migrations
        run: npm run migrate
        env:
          SUPABASE_URL: ${{ secrets.STAGING_DB_URL }}

      - name: Run tests
        run: npm test
        env:
          SUPABASE_URL: ${{ secrets.STAGING_DB_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.STAGING_ANON_KEY }}

      - name: Create test report
        if: always()
        run: |
          echo "## Quarterly Restore Test Results" > test-report.md
          echo "- Date: $(date)" >> test-report.md
          echo "- Backup Timestamp: ${{ steps.get-backup.outputs.backup_timestamp }}" >> test-report.md
          echo "- Status: ${{ job.status }}" >> test-report.md
          echo "- Environment: Staging" >> test-report.md

      - name: Upload test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restore-test-report
          path: test-report.md

      - name: Send notification
        if: always()
        uses: slackapi/slack-github-action@v1.25.0
        with:
          channel-id: 'backup-monitoring'
          slack-message: |
            Quarterly Database Restore Test: ${{ job.status }}
            Environment: Staging
            Date: ${{ steps.get-backup.outputs.backup_timestamp }}
            Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
